/*

 const int nrows = 3; // number of rows
    const int ncols = 4; // number of columns

    int lead = 0; 

    while (lead < nrows) {
        float d, m;

        for (int r = 0; r < nrows; r++) { // for each row ...
             calculate divisor and multiplier
            d = A[lead][lead];
            m = A[r][lead] / A[lead][lead];

            for (int c = 0; c < ncols; c++) { // for each column ...
                if (r == lead)
                    A[r][c] /= d;               // make pivot = 1
                else
                    A[r][c] -= A[lead][c] * m;  // make other = 0
            }
        }

        lead++;
        printmatrix(A);
    }
*/
      
    // double diag_element = DEF[counter][counter];



    // for(int l = 0; l < columns; l++) {
    //     DEF[counter][l] = DEF[counter][l] / diag_element;
    // }

    // std::vector<int> num;
    // for(int p = 1; p < rows; p++) {
    //       auto multiplier = std::find_if(DEF[p].begin(), DEF[p].end(), [](auto element) { 
    //          num.push_back(p);
    //          return element != 0; 
    //         });

    //       std::cout << *multiplier << std::endl;

       
         
          
     
// loop thru the rows at column 0
// find a non zero element multiply it by the pivot
// subtract the two rows 

  


    // for(int p = counter; p < rows; p++) {
    //     double multiplier = DEF[p][counter - 1];
    //     for(int l = 0; l < columns; l++) {
    //         DEF[p][l] -= (DEF[counter - 1][l] * multiplier);
    //         number++;
    //     }
    // }

  // Fix this piece up in the code!!!